@startuml
autonumber

actor Student as St <<actor>>
participant "ListExamGradesStudentUI" as UI <<presentation>>
participant "ListCoursesService" as CrSer <<application>>
participant "StudentService" as StService <<application>>
participant "CourseService" as CService <<application>>
participant "ListStudentGradesController" as Ctr <<application>>
participant "ListStudentGradesService" as GrSer
participant "FormerExamService" as FEService
database "StudentRepository" as StRepo
database "CourseEnrollmentRepository" as CERepo
database "FormerExamRepository" as ExaRepo

activate UI
St -> UI : asks for a list of his grades
activate CrSer
UI -> CrSer: Iterable<CourseDTO> studentCourses()
note right
the user is obtained through session
end note
activate StService
CrSer-> StService:  Student studentLog = findStudentByUsername(this.authz.session().get().authenticatedUser().username())
activate StRepo
StService-> StRepo: findStudentByUserName(user)
StRepo --> StService:
deactivate StRepo
activate CService
StService->CService: Iterable<CourseDTO> result = studentCourses(studentLog)
activate CERepo
CService -> CERepo: Iterable<Course> courses = coursesThatStudentIsEnrolledOn(student.toDTO().getMechanographicalNumber().toString())
CERepo --> CService:
deactivate CERepo
CService-->StService: result
deactivate CService
StService--> CrSer: result
deactivate StService
CrSer-->UI: result
deactivate CrSer
UI-->St: shows a list of courses to the student select
St->UI: selects a course to list the grades of it's Exams
UI->Ctr: Iterable<FormerExamDTO> formerExamList = listExamsGrades(selectedCourse)
activate FEService
Ctr->FEService: listExamsGrades(course)
activate ExaRepo
FEService->ExaRepo:Iterable<FormerExam> exams =listFormerExamsOfCourse(course)
ExaRepo-->FEService: list of exams
deactivate ExaRepo
FEService-->Ctr: list of exams
Ctr-->UI: list of exams
UI-->St: presents the title of the exams and the correspondent grades
deactivate StService
deactivate CService

@enduml