Many users will try to update something on the shared board, meaning that concurrently access is going to exist.
There are many problems linked with concurrent access, for instance data inconsistency (two or more users changing the
same Post-It content, etc...). That kind of problem is what we want to avoid, so we are going to implement a
synchronization mechanism, semaphores!
The solution is simple, there is need of only one semaphore that will control the access to the critical zone (where the
critical zone is going to be the shared board) and a synchronization semaphore to notify all the users when changes
have been made to the shared memory. For that, both a mutual exclusion and synchronization semaphores are used.To see
the practical evidence, there is a C implementation on "PracticalEvidence.c" file.